(function () {
    'use strict';

    angular
        .module('shared.worksheet')
        .provider('worksheetService', worksheetService);

    function worksheetService () {
        var worksheetData;
        var currentWorksheetIndex;
        var permitMultipleWorksheetLayout;
        var startAtMenu;
        var startingWorksheetIndex;
        var isLastWorksheet;
        var readOnly;
        var isPreview;
        var resourceDeploymentId;
        var questionIndexObj;
        var bookmarkedQuestionIndexObj;

        return {
            setWorksheetData: setWorksheetData,
            $get: ['_', '$sce', '$http', '$window', '$q', worksheetFactory]
        };

        function setWorksheetData(data) {
            worksheetData = data;

            setPermitMultipleWorksheetLayout();
            setStartPosition();
        }

        function setPermitMultipleWorksheetLayout() {
            permitMultipleWorksheetLayout = worksheetData['all_evaluated_results'].length > 1;
        }

        function setStartPosition() {
            var index = 0;
            startAtMenu = false;

            while (typeof worksheetData['all_evaluated_results'][index]['student_answers']['worksheet_completed_at'] === 'string') {
                startAtMenu = true;
                ++index;
            }

            startingWorksheetIndex = index;
            isLastWorksheet = worksheetData['all_evaluated_results'].length === index + 1;
        }

        function worksheetFactory(_, $sce, $http, $window, $q) {
            var factory = this;

            factory.isActivityCompletion = false;
            factory.isMidProgress = false;

            return {
                getIndexedWorksheetDataTrustAsHtml: getIndexedWorksheetDataTrustAsHtml,
                getWorksheetDataTrustAsHtml: getWorksheetDataTrustAsHtml,
                getPermitMultipleWorksheetLayout: getPermitMultipleWorksheetLayout,
                getStartAtMenu: getStartAtMenu,
                getStartingWorksheetIndex: getStartingWorksheetIndex,
                getIsWorksheetAlreadyCompleted: getIsWorksheetAlreadyCompleted,
                getIsLastWorksheet: getIsLastWorksheet,
                setReadOnly: setReadOnly,
                getReadOnly: getReadOnly,
                setIsPreview: setIsPreview,
                getIsPreview: getIsPreview,
                setResourceDeploymentId: setResourceDeploymentId,
                getResourceDeploymentId: getResourceDeploymentId,
                setWorksheetIndex: setWorksheetIndex,
                setQuestionIndex: setQuestionIndex,
                getQuestionIndex: getQuestionIndex,
                setBookmarkedQuestionIndex: setBookmarkedQuestionIndex,
                getBookmarkedQuestionIndex: getBookmarkedQuestionIndex,

                getStudentAnswers: getStudentAnswers,
                getBackgroundClass: getBackgroundClass,
                getBackgroundImage: getBackgroundImage,
                evaluateStudentAnswers: evaluateStudentAnswers,
                recordActivityBookmark: recordActivityBookmark,
                recordWorksheetComplete: recordWorksheetComplete,
                recordActivityComplete: recordActivityComplete
            };

            function getWorksheetDataTrustAsHtml() {
                var allWorksheetInfo = [];

                _.each(worksheetData['all_evaluated_results'], function (data, index) {
                    allWorksheetInfo.push(getIndexedWorksheetDataTrustAsHtml(index));
                });

                return allWorksheetInfo;
            }

            function getIndexedWorksheetDataTrustAsHtml(index) {
                var worksheet = angular.copy(worksheetData['all_evaluated_results'][index]);

                worksheet.quiz_info.title = $sce.trustAsHtml(worksheet.quiz_info.title);
                worksheet.quiz_info.displayTitle = $sce.trustAsHtml(worksheet.quiz_info.displayTitle);
                worksheet.quiz_info.razBookTitle = $sce.trustAsHtml(worksheet.quiz_info.razBookTitle);
                worksheet.quiz_info.copyright = $sce.trustAsHtml(worksheet.quiz_info.copyright);

                return getQuestionsTrustAsHtml(worksheet);
            }

            function getQuestionsTrustAsHtml(worksheet) {
                _.each(worksheet.quiz_info.questions, function (question) {
                    question.prompt = $sce.trustAsHtml(question.prompt);
                    question.instructions = $sce.trustAsHtml(question.instructions);
                    question.passage.title = $sce.trustAsHtml(question.passage.title);
                    question.passage.text = $sce.trustAsHtml(question.passage.text);
                    question.background_image = $sce.trustAsHtml(question.background_image);
                    _.each(question.charts, function(chart) {
                        _.each(chart.columns, function (col) {
                            if (col.label !== '') {
                                col.label = $sce.trustAsHtml(col.label);
                            }
                        });
                        _.each(chart.rows, function (row) {
                            if (row.label !== '') {
                                row.label = $sce.trustAsHtml(row);
                            }
                        })
                    });
                    _.each(question.choices, function (choice) {
                        choice.answer = $sce.trustAsHtml(choice.answer);
                    })
                });

                return worksheet;
            }

            function getPermitMultipleWorksheetLayout() {
                return permitMultipleWorksheetLayout;
            }

            function getStartAtMenu() {
                return startAtMenu;
            }

            function getStartingWorksheetIndex() {
                return startingWorksheetIndex;
            }

            function getIsWorksheetAlreadyCompleted() {
                return typeof worksheetData['all_evaluated_results'][currentWorksheetIndex]['student_answers']['worksheet_completed_at'] === 'string';
            }

            function getIsLastWorksheet() {
                return isLastWorksheet;
            }

            function setReadOnly(isReadOnly) {
                readOnly = isReadOnly;
            }

            function getReadOnly() {
                return readOnly;
            }

            function setIsPreview(preview) {
                isPreview = preview;
            }

            function getIsPreview() {
                return isPreview;
            }

            function setResourceDeploymentId(resDeploymentId) {
                resourceDeploymentId = resDeploymentId;
            }

            function getResourceDeploymentId() {
                return resourceDeploymentId;
            }

            function setWorksheetIndex(index) {
                currentWorksheetIndex = index;
            }

            function setQuestionIndex(questionIdx) {
                questionIdx = parseInt(questionIdx);
                if (questionIdx > worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.questions.length) {
                    questionIdx = worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.questions.length;
                }
                questionIndexObj = {'questionIndex': questionIdx};
            }

            function getQuestionIndex() {
                return questionIndexObj.questionIndex;
            }

            function setBookmarkedQuestionIndex(bookmarkedIdx) {
                bookmarkedIdx = parseInt(bookmarkedIdx);
                if (bookmarkedIdx > worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.questions.length) {
                    bookmarkedIdx = worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.questions.length;
                }
                bookmarkedQuestionIndexObj = {'questionIndex': bookmarkedIdx};
            }

            function getBookmarkedQuestionIndex() {
                return bookmarkedQuestionIndexObj.questionIndex;
            }

            function getStudentAnswers() {
                return worksheetData['all_evaluated_results'][currentWorksheetIndex].student_answers;
            }

            function getBackgroundClass() {
                if (worksheetData['all_evaluated_results'][currentWorksheetIndex]['quiz_info']['questions'][getQuestionIndex()-1]['question_format_name'] == 'read-only') {
                    return "worksheet-readOnly";
                }
                return null;
            }

            function getBackgroundImage() {
                return worksheetData['all_evaluated_results'][currentWorksheetIndex]['quiz_info']['questions'][getQuestionIndex()-1]['background_image'];
            }

            function evaluateStudentAnswers(studentAnswers, questionIndex) {
                var url = '/api/resource/worksheet/student_answers';
                var data = {
                    'student_answers' : studentAnswers,
                    'worksheet_id'    : worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.test_id,
                    'question_index'  : questionIndex
                };

                return $http
                    .post(url, data)
                    .then(function (response) {
                        var nextBookmark = Object.keys(response.data.currentResults.question).length + 1;

                        worksheetData['all_evaluated_results'][currentWorksheetIndex].student_answers = response.data.currentResults;
                        worksheetData['all_evaluated_results'][currentWorksheetIndex].bookmarkedIndex = nextBookmark;

                        _.each(worksheetData['all_evaluated_results'], function (data, index) {
                            if (worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.test_id === data.quiz_info.test_id) {
                                worksheetData['all_evaluated_results'][index]['student_answers'] = worksheetData['all_evaluated_results'][currentWorksheetIndex].student_answers;
                                worksheetData['all_evaluated_results'][index]['bookmarkedIndex'] = nextBookmark;
                            }
                        });

                        return response.data;
                    });
            }

            function recordActivityBookmark() {
                if (! factory.isActivityCompletion || factory.isMidProgress) {
                    var type = 'POST';
                    var url = '/api/activity/bookmark';
                    var data = {
                        'activity_bookmark' : bookmarkedQuestionIndexObj.questionIndex
                    };

                    synchronousAjaxRequest(type, url, data);
                }
            }

            function recordWorksheetComplete() {
                var url = "/api/resource/worksheet/completion";
                var data = {
                    'worksheet_id': worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.test_id
                };
                var deferred = $q.defer();

                $http
                    .post(url, data)
                    .then(function(response) {
                        deferred.resolve(response);

                        // TODO (aselleke, 09/10/2018): Refactor this ASAP; ugly stuff on my part....
                        worksheetData['all_evaluated_results'][currentWorksheetIndex].student_answers.worksheet_completed_at = 'true';
                        var count = 0;

                        _.each(worksheetData['all_evaluated_results'], function (data, index) {
                            if (worksheetData['all_evaluated_results'][currentWorksheetIndex].quiz_info.test_id === data.quiz_info.test_id) {
                                worksheetData['all_evaluated_results'][index]['student_answers']['worksheet_completed_at'] = 'true';
                            }

                            if (typeof worksheetData['all_evaluated_results'][index]['student_answers']['worksheet_completed_at'] === 'string') {
                                ++count;
                            }
                        });

                        isLastWorksheet = worksheetData['all_evaluated_results'].length === count;
                    });

                return deferred.promise;
            }

            function recordActivityComplete() {
                var url = "/api/activity/completion";
                var data = {
                    'resource_deployment_id': resourceDeploymentId
                };

                $http
                    .post(url, data)
                    .then(function() {
                        factory.isActivityCompletion = true;
                        factory.isMidProgress = !isLastWorksheet;
                        $window.location.href = '/main/ActivityReward/id/' + resourceDeploymentId;
                    });
            }

            function synchronousAjaxRequest(type, url, data) {
                angular.element.ajax({
                    async : false,
                    type  : type,
                    url   : url,
                    data  : data
                });
            }
        }
    }
})();
